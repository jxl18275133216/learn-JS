Go
	关于
	前言:
	用更少的代码、更短的编译时间、创建运行更快的程序，享受更多的乐趣
	对编程语言的设计要求:
	1.能够以更快的速度开发软件
	2.开发的软件能很好的在现在的多核计算机上工作
	3.开发的软件能很好的在网络环境下工作
	4.使人们能够享受软件开发的过程
	了解和使用已经被广泛认同的规范是学习阶段最重要的实践
一、学习Go
	1.1、起源、发展与普及
		Go语言起源于2007年，09年正式对外发布
		完全开源
	1.2主要特性与发展环境和影响因素
		快速编译、高效执行、易于开发
	————————————————————————————————————————————————————————
		某个问题有且只有一种解决方法
		没有不必要的代码
		全局变量可以声明但是不使用
	————————————————————————————————————————————————————————
		Go没有类和继承的概念、而是使用接口来实现多态性
		Go语言使用静态类型
		隐式的类型转换是不被允许的，所有类型都必须是显式
	1.2平台与框架
二、结构与技术
	1.文件名、关键字与标识符
		Go本身没有对源文件大小进行限制
		'_'本身是个特殊的标识符、可以被赋值;
		但任何被赋给_的值都将被抛弃，不能在后续代码中使用
		匿名变量:没有名称的变量、类型或方法
		程序的组成:
			关键字、常量、变量、运算符、类型和函数;
			分隔符有:()、[]、{}
			go语言有25个关键字，并且全部小写
	2.基本结构和要素
		package main
		importy(
			"fmt"
		)
		func main(){
			fmt.Println("Hello World")
		}
		程序的一般结构
			(1)包名——通过package定义
			(2)导包——通过import导入非main包
			(3)常量——通过const定义常量
			(4)变量——var
			(5)结构或接口——type(结构)、struct或interface定义接口
			(6)函数和方法——func
	2.1包的概念、导入和可见性
		(1)包是结构化代码的一种方式:每个程序都由包的概念组成，可以使用自身的包或者从其他包中导入内容
		(2)每个Go文件都属于且只属于一个包、一个包可以有多个Go文件
		(3)必须在Go文件的第一行非注释行指明该文件属于哪个包<例如:package main>
		(4)每个Go应用程序都包含一个名为main的包
		(5)标准库:即可以直接使用的包
		每一段代码都只会编译一次
		(6)可见性规则
			编译器强制执行的规则
			***当标识符以大写字母开头的时候，该对象可被外部包的代码所使用————类似Java中的public******
			***当标识符以小写字母开头的时候，该对象不可被外部包的代码所使用————类似Java中的private***
		(7)导入了包必须使用
			导入了某个包而不使用会报错:imported and not use:	
	2.2函数
		fun name(var1 var1Type,var2 var2Type...)return type{
			content(函数体)
		}
		main函数是每一个可执行文件所必须包含的，一般来说都是在启动之后第一个执行的函数；
		若main包没有包含main函数则引发构建错误:undefined main.main()
		(1)函数名
			以大写字母开头，遵循帕斯卡命名规则，被外部包可见
			以小写字母开头，遵循驼峰命名规则，不被外部包可见
		(2)程序正常退出的代码为0，即Program exited with code 0
			出现异常或者错误则是其他，比如:1
	2.3注释
		注释不会被编译，但是可以使用godoc来使用
		每一个包都应该有相关注释
		在package前面的注释块将被默认为是这个包的文档说明
	2.4类型
		变量或者常量可以使用不同的数据类型或者类型来保存数据:
		使用var声明的变量将自动初始化为改类型的零值
		类型定义了某个变量的值的集合以及可对其进行操作的集合——————例:int 表示该变量可以操作的集合为int类型的集合
		*Go不存在类型继承
	2.5.Go程序的一般结构
		Go程序的执行(程序启动)顺序:
		(1)按顺序导入所有被main包引用的其他包，然后在每个包下面执行以下流程:
		(2)若该包又导入了其他包，重复步骤一，递归操作，但是每个包都只会被导入一次(个人理解就是重复被import的包只有第一次会被导入，后面几次导入将不会执行)
		(3)然后以相反的顺序在每个包里面初始化常量、变量，若该包中有init函数，则调用该函数
		(4)最后，main也执行相同的过程，最后调用main函数开始执行程序
	2.6.类型转换
		valueOfB = tyepB(valueOfA)
		类型B的值 = 类型B（类型A的值）
		在必要及可行的情况下，一个类型的值可以被转换为另一个类型的值、
		所有的转换必须是显式的，就像调用一个函数
	2.7.命名规范
		gofmt -w fileName.go
	
	3.常量
		常量使用const定义
		常量只能存储布尔型、数字型和字符串型	
		数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出——————变量需要，并且大精度大范围的常量复制给小精度的变量时可能会出现溢出问题
		iota————(初次接触时，可以简单的理解为遇见const将重置为0)
	
	4.变量
		(1)变量的声明一般使用var
			变量的类型放在变量名之后:
			var typeName type
			*因式分解的写法一般用于声明全局变量:
			var {
				a string
				b int 
				c float64
			}
			当一个变量被声明之后，系统自动复制给它该变量类型的零值:
				int为0、bool为false、float为0.0、string为空字符串、指针为nil;所有内存在Go总都是经过初始化的
			局部变量提倡使用简短声明语法
			b := 10

	
	4.2值类型和引用类型
		值类型的变量存在栈中
			一个值类型的变量r存储的是变量r的值
		****引用类型的变量存在堆中****
			一个引用类型的变量r1存储的是变量r1的值所在的内存地址(指针)
			指针就是一个存放地址的内存
	
	4.3打印
	
	4.4.简短形式，使用:=赋值
		这是变量的首选形式，但是只适合用在函数体内
	
	4.5init函数
		每个源文件只能包含一个init函数
		不能够被调用，而是在每个包完成初始化后自动执行，优先级高于main函数
		
	
	5.基本类型和运算符
	5.1.布尔型
		布尔的值只能是常量true或false
		两个类型相同的值可以使用"=="或者"!="来获得一个布尔型的值
		格式化输出时候，需要使用"%t"

		go对于值之间的比较非常严格:只有两个相同类型的值之间才能进行比较；
			如果值的类型是接口，那他们必须实现相同的接口；
			如果其中一个是常量，那另一个值类型必须是能和该常量类型相兼容的；
			如果以上都不满足，那其中一个的值必须转换为和另一个值相同的类型才能比较
	
	5.2.数字型
	5.2.1.int和float32、float64
		
		int是计算最快的一种类型

		go没有float类型
		float32精确到小数点后7位、float64精确到小数点后15位；由于精确度的缘故，在使用"=="和"!="来比较浮点值时必须小心，最好在正式使用前测试对精确度要求较高的运算
		
		应该尽可能的使用float64
		
		Go不允许不同类型之间的混合使用，但是对于常量的限制非常少，因此允许常量混合使用
	
	5.2.2.复数****
		complex64
		complex128
		re+imI

	5.2.3.位运算****
		位运算只能用于整数类型的运算、且需要当它们拥有等长位模式时
		(不懂,再研究)
	
	5.2.4.逻辑运算符
		==、!=、<、<=、>、>=
		运算结果总是布尔值

	5.2.5.算数运算符
		+、-、*、/
		整数除以0会导致程序崩溃
		浮点数除以0.0会得到无穷尽的的结果

	5.2.6.随机数
		"rand"包
		需要得到随机整数步骤
		import(
			"math/rand"
			"time"
		)
		func Getrand(){
			rand.Seed(time.Now().Unix())
			a := rand.Intn(100)
		}

	5.3.运算符与优先级
	优先级     运算符
		7      ^ !
		6      * / % << >> & &^
		5      + - | ^
		4      == != < <= >= >
		3      <-
		2      &&
		1      ||
	
	5.4.类型别名
		当使用某个类型的时候，可以起另一个名字，然后就可以在自己的代码中使用新的名字
		实际上，类型别名得到的新类型并非原来的类型，新类型不会拥有原类型所附带的方法，但是可以自定以自己的方法来更加人性化的使用
	
	5.5.字符类型
		???

	6.字符串
		字符串是UTF8字符的一个序列


	7.strings包
		Go用strings包完成对字符串的主要操作
	7.1.前缀和后缀
		HasPrefix————判断字符串是否以xx开头
		HasSuffix————判断字符串是否以xx结尾
		demo/4.go
		
	7.2.字符串包含关系
	Contains————判断字符串是否包含xx
	1.go
	7.3.判断子字符串在字符串中的索引
	Index————判断子字符串在字符串中的索引;返回-1时表示子字符串不在字符串中
	LastIndex返回子字符串在字符串中最后出现的位置
	1.go
	7.4.字符串替换
	Replace
	strings.Replace(str,old,new,n)string将str中前n个字符old替换为new,n=-1则替换所有
	1.go
	7.5.统计字符串出现次数
	Count————统计次数
	strings.Count(s,str) int
	7.6.重复字符串
	Repeat————重复字符串
	strings.Repeat(str,n)string将字符串str重复n次
	1.go
	7.7.修改字符串大小
	ToLower
	ToUpper
	strings.ToLower/ToUpper(str)string
	7.8.修剪字符串
	strings.TrimSpace(str)
	strings.Trim(str,"str")
	strings.TrimLeft(str)
	strings.TrimRight(str)
	如果需要剔除的字符串包括空格，则第二个参数的字符串可用一个空格来表示任意多个空格，且左右位置不定
	1.go
	7.9.分割字符串
	7.10.拼接slice到字符串
	7.11.从字符串中读取内容
	7.12.字符串与其他类型的转换
	7.13.
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
格式化说明符号
%d格式化整数
%X、%x格式化16进制表示的数字
%g格式化浮点型(%f输出浮点数、%e输出科学计数表达式)
%0d用于规定输出定长的整数
%n.mg、%n.mf、%n.me用于表示小数n精确到小数点后m位
%v表示复数
%b位的格式化标识符
	
	
	
	
	
	
	
	