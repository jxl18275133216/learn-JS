<JavaScript>
	<day1>
		显示数据
		windows.alert();弹出警告框
		document.write();将内容写在html文档中
		innerHTML写入到html元素中
		console.log()写入到浏览器的控制台
	</day1>
	<day2>
		<one>
			let变量,let声明的变量只在其声明的块域或子块中可用,let与var 区别见测试文件
			同一个function 中不能同时存在let和var,否则function不能执行
			let可以简化函数内部代码
		</one>
		<two>
			//1.js中的数据类型有:
			//string、number、boolean、array、object、null、undefined
			2.变量:
			js中变量分全局变量和局部变量
			变量的声明周期都是从它们被声明时开始，局部变量会在函数执行完毕后被删除，全局变量则是网页被关闭之后被删除
			如果一个未被声明的变量被赋值，该变量会自动成为全局变量，哪怕它是在函数中执行的
			3.js作用域:
			4.js事件
			5.== 和===
			6.js运算和比较、逻辑运算
			7.标签引用
				通过给一个语句加标签，就可以给这个语句加一个名字，这样在程序任何地方都可以调用这个名字来使用该语句
			8.null、undefined的区别
			typeof null      //object
			typeof undefined //undefined
			null===undefined //false
			null==undefined //true
		</two>
	</day2>
	<day3>
		<one>
			JS的数据类型:
			五种数据类型:string、number、boolean、object、function
			三种对象类型:Object、Date、Array
			二中不包含值的数据类型:null undefined
			typeof 和 instanceof
		</one>
		<two>
			正则表达式，我不会，我没有
		</two>
		<three>
			try...catch 以及throw
		</three>
		<four>
			JS中，函数及变量的声明都将被提升到函数的最顶部
			js中，变量可以在使用后声明
			js中分号不是必须得，js会自动在完成的语句后面添加一个分号，但是，这样可能会导致代码运行的结果与预期不符，所以最好手动显示的添加分号
		</four>
		<five>
			表单验证
			1.使用function return false
			2.自动验证 required="required"
			数据验证
		</five>
		<six>
			JSON:
			一种轻量级的数据交换格式，数据是键值对，数据有逗号分隔，大括号保存对象，方括号保存数组
		</six>
		<seven>
			javascript:void();
			void()仅仅代表不返回任何值，但是里面的表达式还是会执行
			void()指定要计算一个表达式但是不会返回任何值
		</seven>
	</day3>
	JS函数
	<day4>
		<one>
			function
		</one>
		<two>
			HTML DOM
		</two>
		<three>
			JS对象:
			博大精深，学不动啊
		</three>
	</day4>
	<day5>
		<one>
			浏览器对象
			screen、location()、history(历史信息)、Navigator(包含有关者访问浏览器的信息)
			screen.availWidth;screen.availHeight;
			location.hostname;location.port;location.protocol;
			navigator数据可以被使用者修改
		</one>
		<two>
			弹窗
			alert()——警告框
			confirm()——确认框
			prompt()——提示框
		</two>
		<three>
			计时器事件
			setInterval(function,milliseconds);——第一个参数是函数，第二个参数是时间间隔
			setTimeout(function,milliseconds);——第一个参数是函数，第二个参数是等待时间
		</three>
		<four>
			cookie
			document.cookie;——以键值对的形式返回所有的cookie
			创建cookie
			document.cookie = "键值对形式内容";
			删除cookie
			document.cookie = "需要删除的cookie键值对;expries = '以前的时间";
		</four>
	</day5>
</JavaScript>



2018/10/8——————————————————————————————————————————————————————
		input标签输入框中的值使用.value来获取
		其他标签暂时不能获取value参数的值(目前至少我不知道)
		
		JavaScript拥有动态类型：
			var x;
			x = 6;//x值为数字
			x = "name";//x值为字符串
		
		JavaScript只有一种数字类型，可带可不带小数点
		
		JavaScript对象：
			JavaScript中所有事物都是对象
			当声明一个JavaScript变量的时候就创建了一个对象

		JavaScript是由事件驱动的，或者说它被调用时执行的可重复使用的代码块

		全局变量和局部变量
			声明在函数外的变量为全局变量，在页面关闭时销毁
			声明在函数内的变量为局部变量，在函数执行结束的时候被销毁
			当把值赋给没有声明的变量，改变量自动变为全局变量：
				contant = "A";

		= 赋值
		== 值相等
		=== 值和类型相等

		continue和break
			continue只能在循环这使用
			break可以不仅仅在循环中使用
			通过标签引用，break语句可以跳出任何一个代码块
		———————————————————————————————————————————————————————————————
		2018/10/9——————————————————————————————————————————————————————
		异常处理
		throw、try...catch...
		简单实例中演示中，throw并不是写在function后，而是写在try的判断语句后
		通过throw可以在catch中判处自己想要的异常信息

		表单验证
		with() —— 最好避免使用该代码块
			设定代码在特定对象中的作用域

		email.foucs() 会自动定位到email填写栏————应该是根据input的name属性来定位

		表单验证时，使用onsubmit
		===============================================================
		HTML DOM
		JavaScript可以改变页面中的所有html元素、属性、样式并对所有事件作出反应
		注.修改样式的时候不能从获取样式的属性的值，然后修改这个值来修改样式，必须得使用style.property的方式来修改样式的属性值
		PS.每个js代码块都进行try.catch处理

		添加和删除节点
			添加节点：必须先创建改元素(元素节点)，然后向某个已存在的节点进行追加
			删除节点：必须先找到想删除的节点的父节点，然后通过父节点删除该节点
		阻止冒泡事件：
			evet.stopPropagation();
		———————————————————————————————————————————————————————————————